diff --git a/node_modules/@chakra-ui/core/dist/Box/index.d.ts b/node_modules/@chakra-ui/core/dist/Box/index.d.ts
index 3fa7bc8..7fca9d4 100644
--- a/node_modules/@chakra-ui/core/dist/Box/index.d.ts
+++ b/node_modules/@chakra-ui/core/dist/Box/index.d.ts
@@ -1,12 +1,12 @@
-import * as StyledSystem from "styled-system";
-import * as Emotion from "@emotion/styled";
-import * as React from "react";
-import { Omit } from "../common-types";
+import * as StyledSystem from 'styled-system';
+import * as Emotion from '@emotion/styled';
+import * as React from 'react';
+import { Omit } from '../common-types';
 
 type CSS = React.CSSProperties;
 
-type borderRadius = StyledSystem.BorderRadiusProps["borderRadius"];
-type borderColor = StyledSystem.BorderColorProps["borderColor"];
+type borderRadius = StyledSystem.BorderRadiusProps['borderRadius'];
+type borderColor = StyledSystem.BorderColorProps['borderColor'];
 
 interface ICustomConfig {
   // Custom borderRadius alias
@@ -27,136 +27,136 @@ interface ICustomConfig {
   borderLeftColor?: borderColor;
 
   // Custom width alias
-  w?: StyledSystem.WidthProps["width"];
-  minW?: StyledSystem.MinWidthProps["minWidth"];
-  maxW?: StyledSystem.MaxWidthProps["maxWidth"];
+  w?: StyledSystem.WidthProps['width'];
+  minW?: StyledSystem.MinWidthProps['minWidth'];
+  maxW?: StyledSystem.MaxWidthProps['maxWidth'];
 
   // Custom height alias
-  h?: StyledSystem.HeightProps["height"];
-  minH?: StyledSystem.MinHeightProps["minHeight"];
-  maxH?: StyledSystem.MaxHeightProps["maxHeight"];
+  h?: StyledSystem.HeightProps['height'];
+  minH?: StyledSystem.MinHeightProps['minHeight'];
+  maxH?: StyledSystem.MaxHeightProps['maxHeight'];
 
   // Custom display alias
-  d?: StyledSystem.DisplayProps["display"];
+  d?: StyledSystem.DisplayProps['display'];
 
   // Custom background alias
   backgroundAttachment?: StyledSystem.ResponsiveValue<
-    CSS["backgroundAttachment"]
+    CSS['backgroundAttachment']
   >;
-  bgImg?: StyledSystem.BackgroundImageProps["backgroundImage"];
-  bgSize?: StyledSystem.BackgroundSizeProps["backgroundSize"];
-  bgPos?: StyledSystem.BackgroundPositionProps["backgroundPosition"];
-  pos?: StyledSystem.PositionProps["position"];
-  flexDir?: StyledSystem.FlexDirectionProps["flexDirection"];
+  bgImg?: StyledSystem.BackgroundImageProps['backgroundImage'];
+  bgSize?: StyledSystem.BackgroundSizeProps['backgroundSize'];
+  bgPos?: StyledSystem.BackgroundPositionProps['backgroundPosition'];
+  pos?: StyledSystem.PositionProps['position'];
+  flexDir?: StyledSystem.FlexDirectionProps['flexDirection'];
 
   // CSS properties
-  textDecoration?: StyledSystem.ResponsiveValue<CSS["textDecoration"]>;
-  textDecor?: StyledSystem.ResponsiveValue<CSS["textDecoration"]>;
-  textTransform?: StyledSystem.ResponsiveValue<CSS["textTransform"]>;
-  overflowX?: StyledSystem.ResponsiveValue<CSS["overflowX"]>;
-  overflowY?: StyledSystem.ResponsiveValue<CSS["overflowY"]>;
-  appearance?: StyledSystem.ResponsiveValue<CSS["appearance"]>;
-  transform?: StyledSystem.ResponsiveValue<CSS["transform"]>;
-  transformOrigin?: StyledSystem.ResponsiveValue<CSS["transformOrigin"]>;
-  animation?: StyledSystem.ResponsiveValue<CSS["animation"]>;
-  userSelect?: StyledSystem.ResponsiveValue<CSS["userSelect"]>;
-  pointerEvents?: StyledSystem.ResponsiveValue<CSS["pointerEvents"]>;
-  boxSizing?: StyledSystem.ResponsiveValue<CSS["boxSizing"]>;
-  cursor?: StyledSystem.ResponsiveValue<CSS["cursor"]>;
-  resize?: StyledSystem.ResponsiveValue<CSS["resize"]>;
-  transition?: StyledSystem.ResponsiveValue<CSS["transition"]>;
-  objectFit?: StyledSystem.ResponsiveValue<CSS["objectFit"]>;
-  objectPosition?: StyledSystem.ResponsiveValue<CSS["objectPosition"]>;
+  textDecoration?: StyledSystem.ResponsiveValue<CSS['textDecoration']>;
+  textDecor?: StyledSystem.ResponsiveValue<CSS['textDecoration']>;
+  textTransform?: StyledSystem.ResponsiveValue<CSS['textTransform']>;
+  overflowX?: StyledSystem.ResponsiveValue<CSS['overflowX']>;
+  overflowY?: StyledSystem.ResponsiveValue<CSS['overflowY']>;
+  appearance?: StyledSystem.ResponsiveValue<CSS['appearance']>;
+  transform?: StyledSystem.ResponsiveValue<CSS['transform']>;
+  transformOrigin?: StyledSystem.ResponsiveValue<CSS['transformOrigin']>;
+  animation?: StyledSystem.ResponsiveValue<CSS['animation']>;
+  userSelect?: StyledSystem.ResponsiveValue<CSS['userSelect']>;
+  pointerEvents?: StyledSystem.ResponsiveValue<CSS['pointerEvents']>;
+  boxSizing?: StyledSystem.ResponsiveValue<CSS['boxSizing']>;
+  cursor?: StyledSystem.ResponsiveValue<CSS['cursor']>;
+  resize?: StyledSystem.ResponsiveValue<CSS['resize']>;
+  transition?: StyledSystem.ResponsiveValue<CSS['transition']>;
+  objectFit?: StyledSystem.ResponsiveValue<CSS['objectFit']>;
+  objectPosition?: StyledSystem.ResponsiveValue<CSS['objectPosition']>;
 
   // Ellipsis alias
-  wordBreak?: StyledSystem.ResponsiveValue<CSS["wordBreak"]>;
-  overflowWrap?: StyledSystem.ResponsiveValue<CSS["overflowWrap"]>;
-  whiteSpace?: StyledSystem.ResponsiveValue<CSS["whiteSpace"]>;
+  wordBreak?: StyledSystem.ResponsiveValue<CSS['wordBreak']>;
+  overflowWrap?: StyledSystem.ResponsiveValue<CSS['overflowWrap']>;
+  whiteSpace?: StyledSystem.ResponsiveValue<CSS['whiteSpace']>;
 
   // SVG color properties
-  fill?: StyledSystem.ColorProps["color"];
-  stroke?: StyledSystem.ColorProps["color"];
+  fill?: StyledSystem.ColorProps['color'];
+  stroke?: StyledSystem.ColorProps['color'];
 
-  bgAttachment?: StyledSystem.ResponsiveValue<CSS["backgroundAttachment"]>;
-  shadow?: StyledSystem.BoxShadowProps["boxShadow"];
+  bgAttachment?: StyledSystem.ResponsiveValue<CSS['backgroundAttachment']>;
+  shadow?: StyledSystem.BoxShadowProps['boxShadow'];
 
   // List properties
-  listStyleType?: StyledSystem.ResponsiveValue<CSS["listStyleType"]>;
-  listStylePosition?: StyledSystem.ResponsiveValue<CSS["listStylePosition"]>;
-  listStyleImage?: StyledSystem.ResponsiveValue<CSS["listStyleImage"]>;
-  listStyleImg?: StyledSystem.ResponsiveValue<CSS["listStyleImage"]>;
-  listStylePos?: StyledSystem.ResponsiveValue<CSS["listStylePosition"]>;
+  listStyleType?: StyledSystem.ResponsiveValue<CSS['listStyleType']>;
+  listStylePosition?: StyledSystem.ResponsiveValue<CSS['listStylePosition']>;
+  listStyleImage?: StyledSystem.ResponsiveValue<CSS['listStyleImage']>;
+  listStyleImg?: StyledSystem.ResponsiveValue<CSS['listStyleImage']>;
+  listStylePos?: StyledSystem.ResponsiveValue<CSS['listStylePosition']>;
 
   // Outline prop
-  outline?: StyledSystem.ResponsiveValue<CSS["outline"]>;
-  float?: StyledSystem.ResponsiveValue<CSS["float"]>;
-  willChange?: StyledSystem.ResponsiveValue<CSS["willChange"]>;
+  outline?: StyledSystem.ResponsiveValue<CSS['outline']>;
+  float?: StyledSystem.ResponsiveValue<CSS['float']>;
+  willChange?: StyledSystem.ResponsiveValue<CSS['willChange']>;
 }
 
 type FontSize =
-  | "xs"
-  | "sm"
-  | "base"
-  | "lg"
-  | "xl"
-  | "2xl"
-  | "3xl"
-  | "4xl"
-  | "5xl"
-  | "6xl";
+  | 'xs'
+  | 'sm'
+  | 'base'
+  | 'lg'
+  | 'xl'
+  | '2xl'
+  | '3xl'
+  | '4xl'
+  | '5xl'
+  | '6xl';
 
 interface IFontSize {
   fontSize?:
     | StyledSystem.ResponsiveValue<FontSize>
-    | StyledSystem.FontSizeProps["fontSize"];
+    | StyledSystem.FontSizeProps['fontSize'];
 }
 
 type FontWeight =
-  | "hairline"
-  | "thin"
-  | "light"
-  | "normal"
-  | "medium"
-  | "semibold"
-  | "bold"
-  | "extrabold"
-  | "black";
+  | 'hairline'
+  | 'thin'
+  | 'light'
+  | 'normal'
+  | 'medium'
+  | 'semibold'
+  | 'bold'
+  | 'extrabold'
+  | 'black';
 
 interface IFontWeight {
   fontWeight?:
     | StyledSystem.ResponsiveValue<FontWeight>
-    | StyledSystem.FontWeightProps["fontWeight"];
+    | StyledSystem.FontWeightProps['fontWeight'];
 }
 
-type LineHeight = "none" | "shorter" | "short" | "normal" | "tall" | "taller";
+type LineHeight = 'none' | 'shorter' | 'short' | 'normal' | 'tall' | 'taller';
 
 interface ILineHeight {
   lineHeight?:
     | StyledSystem.ResponsiveValue<LineHeight>
-    | StyledSystem.LineHeightProps["lineHeight"];
+    | StyledSystem.LineHeightProps['lineHeight'];
 }
 
 type LetterSpacing =
-  | "tighter"
-  | "tight"
-  | "normal"
-  | "wide"
-  | "wider"
-  | "widest";
+  | 'tighter'
+  | 'tight'
+  | 'normal'
+  | 'wide'
+  | 'wider'
+  | 'widest';
 
 interface ILetterSpacing {
   letterSpacing?:
     | StyledSystem.ResponsiveValue<LetterSpacing>
-    | StyledSystem.LetterSpacingProps["letterSpacing"];
+    | StyledSystem.LetterSpacingProps['letterSpacing'];
 }
 
-interface As {
-  as?: React.ElementType;
+interface As<TComponentOverride> {
+  as?: TComponentOverride | React.ElementType;
 }
 
 type TypographyProps = Omit<
   StyledSystem.TypographyProps,
-  "fontWeight" | "lineHeight" | "fontSize" | "letterSpacing"
+  'fontWeight' | 'lineHeight' | 'fontSize' | 'letterSpacing'
 >;
 
 interface Truncated {
@@ -184,7 +184,7 @@ export type BoxProps = React.RefAttributes<HTMLElement> &
   IFontWeight &
   ILineHeight &
   ICustomConfig &
-  As &
+  As<TComponentOverride> &
   Truncated;
 
 declare const Box: React.FC<BoxProps>;
diff --git a/node_modules/@chakra-ui/core/dist/Button/index.d.ts b/node_modules/@chakra-ui/core/dist/Button/index.d.ts
index 7e1b830..15b9d77 100644
--- a/node_modules/@chakra-ui/core/dist/Button/index.d.ts
+++ b/node_modules/@chakra-ui/core/dist/Button/index.d.ts
@@ -1,12 +1,12 @@
-import * as React from "react";
-import * as StyledSystem from "styled-system";
-import { PseudoBoxProps } from "../PseudoBox";
+import * as React from 'react';
+import * as StyledSystem from 'styled-system';
+import { PseudoBoxProps } from '../PseudoBox';
 
 export interface IButton {
   /**
    * The size of the button
    */
-  size?: "xs" | "sm" | "md" | "lg";
+  size?: 'xs' | 'sm' | 'md' | 'lg';
   /**
    * If `true`, the button will show a spinner.
    */
@@ -20,7 +20,7 @@ export interface IButton {
   /**
    * The variant of the button style to use.
    */
-  variant?: "outline" | "ghost" | "unstyled" | "link" | "solid";
+  variant?: 'outline' | 'ghost' | 'unstyled' | 'link' | 'solid';
   /**
    * If `true`, the button will be styled in it's active state.
    */
@@ -41,7 +41,7 @@ export interface IButton {
   /**
    * The html button type to use.
    */
-  type?: "button" | "reset" | "submit";
+  type?: 'button' | 'reset' | 'submit';
   /**
    * The content of the button.
    */
@@ -60,7 +60,7 @@ export interface IButton {
    * The space between the button icon and label.
    * Use the styled-system tokens or add custom values as a string
    */
-  iconSpacing?: StyledSystem.MarginProps["margin"];
+  iconSpacing?: StyledSystem.MarginProps['margin'];
 }
 
 export type ButtonProps = IButton &
diff --git a/node_modules/@chakra-ui/core/dist/Link/index.d.ts b/node_modules/@chakra-ui/core/dist/Link/index.d.ts
index 8cd1203..b7f0345 100644
--- a/node_modules/@chakra-ui/core/dist/Link/index.d.ts
+++ b/node_modules/@chakra-ui/core/dist/Link/index.d.ts
@@ -1,7 +1,7 @@
-import * as React from "react";
-import * as StyledSystem from "styled-system";
-import * as Emotion from "@emotion/styled";
-import { PseudoBoxProps } from "../PseudoBox";
+import * as React from 'react';
+import * as StyledSystem from 'styled-system';
+import * as Emotion from '@emotion/styled';
+import { PseudoBoxProps } from '../PseudoBox';
 
 export interface ILink {
   /**
@@ -19,13 +19,13 @@ export interface ILink {
 }
 
 export type LinkProps = ILink &
-  PseudoBoxProps &
+  PseudoBoxProps<TComponentOverride> &
   React.HTMLProps<HTMLAnchorElement>;
 
 /**
  * Links are accesible elements used primarily for navigation. This component is
  * styled to resemble a hyperlink and semantically renders an `<a>`.
  */
-declare const Link: React.FC<LinkProps>;
+declare const Link: React.FC<LinkProps<TComponentOverride>>;
 
 export default Link;
diff --git a/node_modules/@chakra-ui/core/dist/PseudoBox/index.d.ts b/node_modules/@chakra-ui/core/dist/PseudoBox/index.d.ts
index bf5b7e4..9bb465b 100644
--- a/node_modules/@chakra-ui/core/dist/PseudoBox/index.d.ts
+++ b/node_modules/@chakra-ui/core/dist/PseudoBox/index.d.ts
@@ -1,5 +1,5 @@
-import * as StyledSystem from "styled-system";
-import { BoxProps } from "../Box";
+import * as StyledSystem from 'styled-system';
+import { BoxProps } from '../Box';
 
 interface IPseudoBoxProps {
   /**
@@ -129,7 +129,7 @@ interface IPseudoBoxProps {
   _placeholder?: BoxProps;
 }
 
-export type PseudoBoxProps = IPseudoBoxProps & BoxProps;
+export type PseudoBoxProps = IPseudoBoxProps & BoxProps<TComponentOverride>;
 
 /**
  * PseudoBox is an interactive wrapper that composes `Box`
